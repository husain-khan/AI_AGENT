import boto3

# Your credentials (replace with correct ones before running)
aws_access_key_id = "######"
aws_secret_access_key = "####/13Nr+3kIGbmo1I24BLweKt9"
region_name = "us-east-1" # Ensure this is your desired region

# IAM Role ARN provided by the user
role_arn = "arn:aws:iam::##3###:role/testing-role1"

# Assume the IAM Role
sts_client = boto3.client(
    "sts",
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    region_name=region_name
)

assumed_role = sts_client.assume_role(
    RoleArn=role_arn,
    RoleSessionName="AutomatedS3Session"
)

# Extract temporary credentials
credentials = assumed_role['Credentials']
session = boto3.Session(
    aws_access_key_id=credentials['AccessKeyId'],
    aws_secret_access_key=credentials['SecretAccessKey'],
    aws_session_token=credentials['SessionToken'],
    region_name=region_name
)

# S3 Client using assumed role credentials
s3_client = session.client("s3")

# Define the bucket name (must be globally unique)
bucket_name = "my-automated-s3-bucket-123456789"  # Change to a unique name

# Check if the region is 'us-east-1'
bucket_creation_params = {"Bucket": bucket_name}
if region_name != "us-east-1":
    bucket_creation_params["CreateBucketConfiguration"] = {"LocationConstraint": region_name}

# Create an S3 Bucket
try:
    s3_client.create_bucket(**bucket_creation_params)
    print(f"S3 Bucket Created Successfully: {bucket_name}")
except Exception as e:
    print(f"Error creating S3 bucket: {e}")

# Upload a test file to the S3 bucket
try:
    file_name = "test.txt"
    file_content = "This is an automated upload."
    s3_client.put_object(Bucket=bucket_name, Key=file_name, Body=file_content)
    print(f"File '{file_name}' uploaded successfully to {bucket_name}!")
except Exception as e:
    print(f"Error uploading file: {e}")

# List objects in the bucket
try:
    objects = s3_client.list_objects_v2(Bucket=bucket_name)
    print("\nObjects in S3 Bucket:")
    if "Contents" in objects:
        for obj in objects["Contents"]:
            print(f" - {obj['Key']}")
    else:
        print("No objects found.")
except Exception as e:
    print(f"Error listing objects: {e}")

# Generate a pre-signed URL for the uploaded file (valid for 1 hour)
try:
    presigned_url = s3_client.generate_presigned_url(
        "get_object",
        Params={"Bucket": bucket_name, "Key": file_name},
        ExpiresIn=3600  # 1 hour expiry
    )
    print(f"\nDownload your file here: {presigned_url}")
except Exception as e:
    print(f"Error generating presigned URL: {e}")
